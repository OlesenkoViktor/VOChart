// Generated by Apple Swift version 2.1.1 (swiftlang-700.1.101.15 clang-700.1.81)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class UIColor;
@class NSCoder;

SWIFT_CLASS("_TtC7VOChart16VOChartPopupView")
@interface VOChartPopupView : UIView

/// Colors for labels on popup
@property (nonatomic, copy) NSArray<UIColor *> * __nullable colors;

/// values for labels on popup
@property (nonatomic, copy) NSArray<NSNumber *> * __nullable values;

/// Size of popup
@property (nonatomic) CGSize size;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UITouch;
@class UIEvent;

SWIFT_CLASS("_TtC7VOChart11VOChartView")
@interface VOChartView : UIView

/// Data for ChartView. Interface Builder does not support connecting to an outlet in a Swift file when the outletâ€™s type is a protocol. So temporary this object type is AnyObject
@property (nonatomic, strong) IBOutlet id __null_unspecified dataSourceObject;

/// Color for line. Default is black
@property (nonatomic, strong) UIColor * __nonnull defaultLineColor;

/// Determines to show the labels on the left side of chart
@property (nonatomic) BOOL showLeftLabels;

/// Color for grid. Default is lightGray
@property (nonatomic, strong) UIColor * __nonnull gridColor;

/// Determines to show the vertical Grid
@property (nonatomic) BOOL showVerticalGrid;

/// Distance between vertical lines of grid. Min value is 3
@property (nonatomic) CGFloat gridXOffset;

/// Determines to show the horizontal Grid
@property (nonatomic) BOOL showHorizontalGrid;

/// Distance between horizontal lines of grid. Min value is 3
@property (nonatomic) CGFloat gridYOffset;

/// Determines to show the signs
@property (nonatomic) BOOL showValues;

/// Determines to show dots on lines
@property (nonatomic) BOOL showDots;

/// Determines to show the popup view with detail values
@property (nonatomic) BOOL showPopupOnTouch;

/// Determines color for popup background. Default is clearColor
@property (nonatomic, strong) UIColor * __nonnull popupBackgound;

/// Reloads all of the data for the chart view. Call this method to reload all of the items in the chart view. This causes the chart view to discard any currently visible items and redisplay them.
- (void)reloadData;
- (void)awakeFromNib;
- (void)drawRect:(CGRect)rect;
- (void)touchesBegan:(NSSet<UITouch *> * __nonnull)touches withEvent:(UIEvent * __nullable)event;
- (void)touchesMoved:(NSSet<UITouch *> * __nonnull)touches withEvent:(UIEvent * __nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * __nonnull)touches withEvent:(UIEvent * __nullable)event;
- (void)touchesCancelled:(NSSet<UITouch *> * __nullable)touches withEvent:(UIEvent * __nullable)event;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP7VOChart21VOChartViewDataSource_")
@protocol VOChartViewDataSource

/// Asks the data source to return the number of lines in the chartView.
///
/// \param chartView An object representing the chartView requesting this information.
///
/// \returns  The number of lines in chartView.
- (NSInteger)chartViewNumberOfLines:(VOChartView * __nonnull)chartView;

/// Values for line.
///
/// \param chartView An object representing the chartView requesting this information.
///
/// \param lineIndex An index number identifying a line in chartView
///
/// \returns  The array of values for specific line
- (NSArray<NSNumber *> * __nonnull)chartView:(VOChartView * __nonnull)chartView valuesForLine:(NSInteger)lineIndex;

/// Color for line. Default is black.
///
/// \param chartView An object representing the chartView requesting this information.
///
/// \param lineIndex An index number identifying a line in chartView
///
/// \returns  The color for specific line in chartView
- (UIColor * __nullable)chartView:(VOChartView * __nonnull)chartView colorForLine:(NSInteger)lineIndex;
@optional

/// Name for line label. Required if showVerticalSigns is true
///
/// \param chartView An object representing the chartView requesting this information.
///
/// \param lineIndex An index number identifying a line in chartView
///
/// \returns  The line name for displaying on labels view
- (NSString * __nonnull)chartView:(VOChartView * __nonnull)chartView nameForLine:(NSInteger)lineIndex;
@end

#pragma clang diagnostic pop
